
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.18+29 (git sha1 b2408df31, gcc 10.3.0-1ubuntu1~20.04 -fPIC -Os)


-- Running command `read_verilog buttfly_20220701-142138/partition/buttfly.v buttfly_20220701-142138/bmf_partition/buttfly_5/buttfly_5_approx_k=5.v buttfly_20220701-142138/partition/buttfly_4.v buttfly_20220701-142138/bmf_partition/buttfly_3/buttfly_3_approx_k=7.v buttfly_20220701-142138/bmf_partition/buttfly_2/buttfly_2_approx_k=7.v buttfly_20220701-142138/bmf_partition/buttfly_1/buttfly_1_approx_k=7.v buttfly_20220701-142138/bmf_partition/buttfly_0/buttfly_0_approx_k=7.v; synth -flatten; opt; opt_clean -purge;  opt; opt_clean -purge; write_verilog -noattr buttfly_20220701-142138/tmp/buttfly_9-1-4.v; abc -liberty nangate_45nm_typ.lib -script /home/ectl/Work/Misc/BLASYS/utils/../config/abc.script; stat -liberty nangate_45nm_typ.lib; write_verilog -noattr buttfly_20220701-142138/tmp/buttfly_9-1-4_syn.v;
 ' --

1. Executing Verilog-2005 frontend: buttfly_20220701-142138/partition/buttfly.v
Parsing Verilog input from `buttfly_20220701-142138/partition/buttfly.v' to AST representation.
Generating RTLIL representation for module `\buttfly'.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: buttfly_20220701-142138/bmf_partition/buttfly_5/buttfly_5_approx_k=5.v
Parsing Verilog input from `buttfly_20220701-142138/bmf_partition/buttfly_5/buttfly_5_approx_k=5.v' to AST representation.
Generating RTLIL representation for module `\buttfly_5'.
Generating RTLIL representation for module `\buttfly_5_w5'.
Generating RTLIL representation for module `\buttfly_5_h5'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: buttfly_20220701-142138/partition/buttfly_4.v
Parsing Verilog input from `buttfly_20220701-142138/partition/buttfly_4.v' to AST representation.
Generating RTLIL representation for module `\buttfly_4'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: buttfly_20220701-142138/bmf_partition/buttfly_3/buttfly_3_approx_k=7.v
Parsing Verilog input from `buttfly_20220701-142138/bmf_partition/buttfly_3/buttfly_3_approx_k=7.v' to AST representation.
Generating RTLIL representation for module `\buttfly_3'.
Generating RTLIL representation for module `\buttfly_3_w7'.
Generating RTLIL representation for module `\buttfly_3_h7'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: buttfly_20220701-142138/bmf_partition/buttfly_2/buttfly_2_approx_k=7.v
Parsing Verilog input from `buttfly_20220701-142138/bmf_partition/buttfly_2/buttfly_2_approx_k=7.v' to AST representation.
Generating RTLIL representation for module `\buttfly_2'.
Generating RTLIL representation for module `\buttfly_2_w7'.
Generating RTLIL representation for module `\buttfly_2_h7'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: buttfly_20220701-142138/bmf_partition/buttfly_1/buttfly_1_approx_k=7.v
Parsing Verilog input from `buttfly_20220701-142138/bmf_partition/buttfly_1/buttfly_1_approx_k=7.v' to AST representation.
Generating RTLIL representation for module `\buttfly_1'.
Generating RTLIL representation for module `\buttfly_1_w7'.
Generating RTLIL representation for module `\buttfly_1_h7'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: buttfly_20220701-142138/bmf_partition/buttfly_0/buttfly_0_approx_k=7.v
Parsing Verilog input from `buttfly_20220701-142138/bmf_partition/buttfly_0/buttfly_0_approx_k=7.v' to AST representation.
Generating RTLIL representation for module `\buttfly_0'.
Generating RTLIL representation for module `\buttfly_0_w7'.
Generating RTLIL representation for module `\buttfly_0_h7'.
Successfully finished Verilog frontend.

8. Executing SYNTH pass.

8.1. Executing HIERARCHY pass (managing design hierarchy).

8.1.1. Finding top of design hierarchy..
root of   0 design levels: buttfly_0_h7        
root of   0 design levels: buttfly_0_w7        
root of   1 design levels: buttfly_0           
root of   0 design levels: buttfly_1_h7        
root of   0 design levels: buttfly_1_w7        
root of   1 design levels: buttfly_1           
root of   0 design levels: buttfly_2_h7        
root of   0 design levels: buttfly_2_w7        
root of   1 design levels: buttfly_2           
root of   0 design levels: buttfly_3_h7        
root of   0 design levels: buttfly_3_w7        
root of   1 design levels: buttfly_3           
root of   0 design levels: buttfly_4           
root of   0 design levels: buttfly_5_h5        
root of   0 design levels: buttfly_5_w5        
root of   1 design levels: buttfly_5           
root of   2 design levels: top                 
root of   3 design levels: buttfly             
Automatically selected buttfly as design top module.

8.1.2. Analyzing design hierarchy..
Top module:  \buttfly
Used module:     \top
Used module:         \buttfly_5
Used module:             \buttfly_5_h5
Used module:             \buttfly_5_w5
Used module:         \buttfly_4
Used module:         \buttfly_3
Used module:             \buttfly_3_h7
Used module:             \buttfly_3_w7
Used module:         \buttfly_2
Used module:             \buttfly_2_h7
Used module:             \buttfly_2_w7
Used module:         \buttfly_1
Used module:             \buttfly_1_h7
Used module:             \buttfly_1_w7
Used module:         \buttfly_0
Used module:             \buttfly_0_h7
Used module:             \buttfly_0_w7

8.1.3. Analyzing design hierarchy..
Top module:  \buttfly
Used module:     \top
Used module:         \buttfly_5
Used module:             \buttfly_5_h5
Used module:             \buttfly_5_w5
Used module:         \buttfly_4
Used module:         \buttfly_3
Used module:             \buttfly_3_h7
Used module:             \buttfly_3_w7
Used module:         \buttfly_2
Used module:             \buttfly_2_h7
Used module:             \buttfly_2_w7
Used module:         \buttfly_1
Used module:             \buttfly_1_h7
Used module:             \buttfly_1_w7
Used module:         \buttfly_0
Used module:             \buttfly_0_h7
Used module:             \buttfly_0_w7
Removed 0 unused modules.
Mapping positional arguments of cell buttfly_0.DUT2 (buttfly_0_h7).
Mapping positional arguments of cell buttfly_0.DUT1 (buttfly_0_w7).
Mapping positional arguments of cell buttfly_1.DUT2 (buttfly_1_h7).
Mapping positional arguments of cell buttfly_1.DUT1 (buttfly_1_w7).
Mapping positional arguments of cell buttfly_2.DUT2 (buttfly_2_h7).
Mapping positional arguments of cell buttfly_2.DUT1 (buttfly_2_w7).
Mapping positional arguments of cell buttfly_3.DUT2 (buttfly_3_h7).
Mapping positional arguments of cell buttfly_3.DUT1 (buttfly_3_w7).
Mapping positional arguments of cell buttfly_5.DUT2 (buttfly_5_h5).
Mapping positional arguments of cell buttfly_5.DUT1 (buttfly_5_w5).

8.2. Executing PROC pass (convert processes to netlists).

8.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

8.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

8.2.4. Executing PROC_INIT pass (extract init attributes).

8.2.5. Executing PROC_ARST pass (detect async resets in processes).

8.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

8.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

8.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

8.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

8.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

8.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly_0_h7.
Optimizing module buttfly_0_w7.
Optimizing module buttfly_0.
Optimizing module buttfly_1_h7.
Optimizing module buttfly_1_w7.
Optimizing module buttfly_1.
Optimizing module buttfly_2_h7.
Optimizing module buttfly_2_w7.
Optimizing module buttfly_2.
Optimizing module buttfly_3_h7.
Optimizing module buttfly_3_w7.
Optimizing module buttfly_3.
Optimizing module buttfly_4.
Optimizing module buttfly_5_h5.
Optimizing module buttfly_5_w5.
Optimizing module buttfly_5.
Optimizing module top.
Optimizing module buttfly.

8.3. Executing FLATTEN pass (flatten design).
Deleting now unused module buttfly_0_h7.
Deleting now unused module buttfly_0_w7.
Deleting now unused module buttfly_0.
Deleting now unused module buttfly_1_h7.
Deleting now unused module buttfly_1_w7.
Deleting now unused module buttfly_1.
Deleting now unused module buttfly_2_h7.
Deleting now unused module buttfly_2_w7.
Deleting now unused module buttfly_2.
Deleting now unused module buttfly_3_h7.
Deleting now unused module buttfly_3_w7.
Deleting now unused module buttfly_3.
Deleting now unused module buttfly_4.
Deleting now unused module buttfly_5_h5.
Deleting now unused module buttfly_5_w5.
Deleting now unused module buttfly_5.
Deleting now unused module top.
<suppressed ~17 debug messages>

8.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.
<suppressed ~4 debug messages>

8.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..
Removed 3 unused cells and 132 unused wires.
<suppressed ~4 debug messages>

8.6. Executing CHECK pass (checking for obvious problems).
Checking module buttfly...
Found and reported 0 problems.

8.7. Executing OPT pass (performing simple optimizations).

8.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
<suppressed ~657 debug messages>
Removed a total of 219 cells.

8.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \buttfly..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \buttfly.
Performed a total of 0 changes.

8.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

8.7.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..
Removed 0 unused cells and 215 unused wires.
<suppressed ~1 debug messages>

8.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.7.9. Rerunning OPT passes. (Maybe there is more to do..)

8.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \buttfly..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \buttfly.
Performed a total of 0 changes.

8.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

8.7.13. Executing OPT_DFF pass (perform DFF optimizations).

8.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

8.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.7.16. Finished OPT passes. (There is nothing left to do.)

8.8. Executing FSM pass (extract and optimize FSM).

8.8.1. Executing FSM_DETECT pass (finding FSMs in design).

8.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

8.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

8.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

8.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

8.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

8.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

8.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8.9. Executing OPT pass (performing simple optimizations).

8.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

8.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \buttfly..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \buttfly.
Performed a total of 0 changes.

8.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

8.9.6. Executing OPT_DFF pass (perform DFF optimizations).

8.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

8.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.9.9. Finished OPT passes. (There is nothing left to do.)

8.10. Executing WREDUCE pass (reducing word size of cells).

8.11. Executing PEEPOPT pass (run peephole optimizers).

8.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

8.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module buttfly:
  created 0 $alu and 0 $macc cells.

8.14. Executing SHARE pass (SAT-based resource sharing).

8.15. Executing OPT pass (performing simple optimizations).

8.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

8.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \buttfly..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \buttfly.
Performed a total of 0 changes.

8.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

8.15.6. Executing OPT_DFF pass (perform DFF optimizations).

8.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

8.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.15.9. Finished OPT passes. (There is nothing left to do.)

8.16. Executing MEMORY pass.

8.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

8.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

8.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

8.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

8.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

8.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

8.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

8.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

8.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

8.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

8.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

8.18. Executing OPT pass (performing simple optimizations).

8.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

8.18.3. Executing OPT_DFF pass (perform DFF optimizations).

8.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

8.18.5. Finished fast OPT passes.

8.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

8.20. Executing OPT pass (performing simple optimizations).

8.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

8.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \buttfly..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \buttfly.
Performed a total of 0 changes.

8.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

8.20.6. Executing OPT_SHARE pass.

8.20.7. Executing OPT_DFF pass (perform DFF optimizations).

8.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

8.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.20.10. Finished OPT passes. (There is nothing left to do.)

8.21. Executing TECHMAP pass (map to technology primitives).

8.21.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

8.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
No more expansions possible.
<suppressed ~523 debug messages>

8.22. Executing OPT pass (performing simple optimizations).

8.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

8.22.3. Executing OPT_DFF pass (perform DFF optimizations).

8.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

8.22.5. Finished fast OPT passes.

8.23. Executing ABC pass (technology mapping using ABC).

8.23.1. Extracting gate netlist of module `\buttfly' to `<abc-temp-dir>/input.blif'..
Extracted 452 gates and 484 wires to a netlist network with 32 inputs and 30 outputs.

8.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.23.1.2. Re-integrating ABC results.
ABC RESULTS:              NAND cells:       12
ABC RESULTS:               AND cells:       18
ABC RESULTS:              XNOR cells:        7
ABC RESULTS:               NOR cells:       41
ABC RESULTS:               NOT cells:        7
ABC RESULTS:             ORNOT cells:       19
ABC RESULTS:               MUX cells:        6
ABC RESULTS:               XOR cells:        4
ABC RESULTS:            ANDNOT cells:      124
ABC RESULTS:                OR cells:       52
ABC RESULTS:        internal signals:      422
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       30
Removing temp directory.

8.24. Executing OPT pass (performing simple optimizations).

8.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

8.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

8.24.3. Executing OPT_DFF pass (perform DFF optimizations).

8.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..
Removed 0 unused cells and 723 unused wires.
<suppressed ~331 debug messages>

8.24.5. Finished fast OPT passes.

8.25. Executing HIERARCHY pass (managing design hierarchy).

8.25.1. Analyzing design hierarchy..
Top module:  \buttfly

8.25.2. Analyzing design hierarchy..
Top module:  \buttfly
Removed 0 unused modules.

8.26. Printing statistics.

=== buttfly ===

   Number of wires:                461
   Number of wire bits:            461
   Number of public wires:         201
   Number of public wire bits:     201
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                290
     $_ANDNOT_                     124
     $_AND_                         18
     $_MUX_                          6
     $_NAND_                        12
     $_NOR_                         41
     $_NOT_                          7
     $_ORNOT_                       19
     $_OR_                          52
     $_XNOR_                         7
     $_XOR_                          4

8.27. Executing CHECK pass (checking for obvious problems).
Checking module buttfly...
Found and reported 0 problems.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \buttfly..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \buttfly.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

9.6. Executing OPT_DFF pass (perform DFF optimizations).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..
Removed 0 unused cells and 135 unused wires.
<suppressed ~135 debug messages>

11. Executing OPT pass (performing simple optimizations).

11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \buttfly..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \buttfly.
Performed a total of 0 changes.

11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttfly'.
Removed a total of 0 cells.

11.6. Executing OPT_DFF pass (perform DFF optimizations).

11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttfly.

11.9. Finished OPT passes. (There is nothing left to do.)

12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttfly..

13. Executing Verilog backend.

13.1. Executing BMUXMAP pass.

13.2. Executing DEMUXMAP pass.
Dumping module `\buttfly'.

14. Executing ABC pass (technology mapping using ABC).

14.1. Extracting gate netlist of module `\buttfly' to `<abc-temp-dir>/input.blif'..
Extracted 290 gates and 322 wires to a netlist network with 32 inputs and 30 outputs.

14.1.1. Executing ABC.
