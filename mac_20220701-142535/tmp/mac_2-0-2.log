
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.18+29 (git sha1 b2408df31, gcc 10.3.0-1ubuntu1~20.04 -fPIC -Os)


-- Running command `read_verilog mac_20220701-142535/partition/mac.v mac_20220701-142535/partition/mac_3.v mac_20220701-142535/partition/mac_2.v mac_20220701-142535/bmf_partition/mac_1/mac_1_approx_k=7.v mac_20220701-142535/bmf_partition/mac_0/mac_0_approx_k=1.v; synth -flatten; opt; opt_clean -purge;  opt; opt_clean -purge; write_verilog -noattr mac_20220701-142535/tmp/mac_2-0-2.v; abc -liberty nangate_45nm_typ.lib -script /home/ectl/Work/Misc/BLASYS/utils/../config/abc.script; stat -liberty nangate_45nm_typ.lib; write_verilog -noattr mac_20220701-142535/tmp/mac_2-0-2_syn.v;
 ' --

1. Executing Verilog-2005 frontend: mac_20220701-142535/partition/mac.v
Parsing Verilog input from `mac_20220701-142535/partition/mac.v' to AST representation.
Generating RTLIL representation for module `\mac'.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: mac_20220701-142535/partition/mac_3.v
Parsing Verilog input from `mac_20220701-142535/partition/mac_3.v' to AST representation.
Generating RTLIL representation for module `\mac_3'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: mac_20220701-142535/partition/mac_2.v
Parsing Verilog input from `mac_20220701-142535/partition/mac_2.v' to AST representation.
Generating RTLIL representation for module `\mac_2'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: mac_20220701-142535/bmf_partition/mac_1/mac_1_approx_k=7.v
Parsing Verilog input from `mac_20220701-142535/bmf_partition/mac_1/mac_1_approx_k=7.v' to AST representation.
Generating RTLIL representation for module `\mac_1'.
Generating RTLIL representation for module `\mac_1_w7'.
Generating RTLIL representation for module `\mac_1_h7'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: mac_20220701-142535/bmf_partition/mac_0/mac_0_approx_k=1.v
Parsing Verilog input from `mac_20220701-142535/bmf_partition/mac_0/mac_0_approx_k=1.v' to AST representation.
Generating RTLIL representation for module `\mac_0'.
Generating RTLIL representation for module `\mac_0_w1'.
Generating RTLIL representation for module `\mac_0_h1'.
Successfully finished Verilog frontend.

6. Executing SYNTH pass.

6.1. Executing HIERARCHY pass (managing design hierarchy).

6.1.1. Finding top of design hierarchy..
root of   0 design levels: mac_0_h1            
root of   0 design levels: mac_0_w1            
root of   1 design levels: mac_0               
root of   0 design levels: mac_1_h7            
root of   0 design levels: mac_1_w7            
root of   1 design levels: mac_1               
root of   0 design levels: mac_2               
root of   0 design levels: mac_3               
root of   2 design levels: top                 
root of   3 design levels: mac                 
Automatically selected mac as design top module.

6.1.2. Analyzing design hierarchy..
Top module:  \mac
Used module:     \top
Used module:         \mac_3
Used module:         \mac_2
Used module:         \mac_1
Used module:             \mac_1_h7
Used module:             \mac_1_w7
Used module:         \mac_0
Used module:             \mac_0_h1
Used module:             \mac_0_w1

6.1.3. Analyzing design hierarchy..
Top module:  \mac
Used module:     \top
Used module:         \mac_3
Used module:         \mac_2
Used module:         \mac_1
Used module:             \mac_1_h7
Used module:             \mac_1_w7
Used module:         \mac_0
Used module:             \mac_0_h1
Used module:             \mac_0_w1
Removed 0 unused modules.
Mapping positional arguments of cell mac_0.DUT2 (mac_0_h1).
Mapping positional arguments of cell mac_0.DUT1 (mac_0_w1).
Mapping positional arguments of cell mac_1.DUT2 (mac_1_h7).
Mapping positional arguments of cell mac_1.DUT1 (mac_1_w7).

6.2. Executing PROC pass (convert processes to netlists).

6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

6.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

6.2.4. Executing PROC_INIT pass (extract init attributes).

6.2.5. Executing PROC_ARST pass (detect async resets in processes).

6.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

6.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

6.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

6.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

6.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

6.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac_0_h1.
Optimizing module mac_0_w1.
Optimizing module mac_0.
Optimizing module mac_1_h7.
Optimizing module mac_1_w7.
Optimizing module mac_1.
Optimizing module mac_2.
Optimizing module mac_3.
Optimizing module top.
Optimizing module mac.

6.3. Executing FLATTEN pass (flatten design).
Deleting now unused module mac_0_h1.
Deleting now unused module mac_0_w1.
Deleting now unused module mac_0.
Deleting now unused module mac_1_h7.
Deleting now unused module mac_1_w7.
Deleting now unused module mac_1.
Deleting now unused module mac_2.
Deleting now unused module mac_3.
Deleting now unused module top.
<suppressed ~9 debug messages>

6.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac.

6.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac..
Removed 84 unused cells and 156 unused wires.
<suppressed ~85 debug messages>

6.6. Executing CHECK pass (checking for obvious problems).
Checking module mac...
Found and reported 0 problems.

6.7. Executing OPT pass (performing simple optimizations).

6.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac.

6.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac'.
<suppressed ~186 debug messages>
Removed a total of 62 cells.

6.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac.
Performed a total of 0 changes.

6.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac'.
Removed a total of 0 cells.

6.7.6. Executing OPT_DFF pass (perform DFF optimizations).

6.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac..
Removed 0 unused cells and 70 unused wires.
<suppressed ~9 debug messages>

6.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac.

6.7.9. Rerunning OPT passes. (Maybe there is more to do..)

6.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac.
Performed a total of 0 changes.

6.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac'.
Removed a total of 0 cells.

6.7.13. Executing OPT_DFF pass (perform DFF optimizations).

6.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac..

6.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac.

6.7.16. Finished OPT passes. (There is nothing left to do.)

6.8. Executing FSM pass (extract and optimize FSM).

6.8.1. Executing FSM_DETECT pass (finding FSMs in design).

6.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac..

6.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.9. Executing OPT pass (performing simple optimizations).

6.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac.

6.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac'.
Removed a total of 0 cells.

6.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \mac..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mac.
Performed a total of 0 changes.

6.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\mac'.
Removed a total of 0 cells.

6.9.6. Executing OPT_DFF pass (perform DFF optimizations).

6.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mac..

6.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module mac.

6.9.9. Finished OPT passes. (There is nothing left to do.)

6.10. Executing WREDUCE pass (reducing word size of cells).

6.11. Executing PEEPOPT pass (run peephole optimizers).
